layout(push_constant, std430) uniform pushConstants {
    ivec2 plane_sizes[3];
    int plane_offs[3];
    int plane_strides[3];
    int dw[3];
    int wavelet_depth;
};

int getIdx(int plane, int x, int y) {
  return plane_offs[plane] + plane_strides[plane] * y + x;
}

int32_t fidelity_low(int32_t v0, int32_t v1, int32_t v2, int32_t v3,
                        int32_t v4, int32_t v5, int32_t v6, int32_t v7) {
    return  (-2 * v0 + 10 * v1 - 25 * v2 + 81 * v3 + 81 * v4 - 25 * v5 + 10 * v6 - 2 * v7 + 128) >> 8;
}

int32_t fidelity_high(int32_t v0, int32_t v1, int32_t v2, int32_t v3,
                        int32_t v4, int32_t v5, int32_t v6, int32_t v7) {
    return  (-8 * v0 + 21 * v1 - 46 * v2 + 161 * v3 + 161 * v4 - 46 * v5 + 21 * v6 - 8 * v7 + 128) >> 8;
}

int32_t fidelity_low_y(int plane, int x, int y) {
    const int h = plane_sizes[plane].y;

    const int32_t v1 = inBuf[getIdx(plane, x, y + 1)];

    const int y_6 = ((y - 6) > 0) ? (y - 6) : 0;
    const int32_t v_6 = inBuf[getIdx(plane, x, y_6)];

    const int y_4 = ((y - 4) > 0) ? (y - 4) : 0;
    const int32_t v_4 = inBuf[getIdx(plane, x, y_4)];

    const int y_2 = ((y - 2) > 0) ? (y - 2) : 0;
    const int32_t v_2 = inBuf[getIdx(plane, x, y_2)];

    const int32_t v0 = inBuf[getIdx(plane, x, y)];

    const int y2 = ((y + 2) < h) ? (y + 2) : (h - 2);
    const int32_t v2 = inBuf[getIdx(plane, x, y2)];

    const int y4 = ((y + 4) < h) ? (y + 4) : (h - 2);
    const int32_t v4 = inBuf[getIdx(plane, x, y4)];

    const int y6 = ((y + 6) < h) ? (y + 6) : (h - 2);
    const int32_t v6 = inBuf[getIdx(plane, x, y6)];

    const int y8 = ((y + 8) < h) ? (y + 8) : (h - 2);
    const int32_t v8 = inBuf[getIdx(plane, x, y8)];

    return v1 + fidelity_low(v_6, v_4, v_2, v0, v2, v4, v6, v8);
}

void idwt_vert(int plane, int x, int y) {
    const int h = plane_sizes[plane].y;

    const int32_t v0 = inBuf[getIdx(plane, x, y)];
    const int32_t v1 = fidelity_low_y(plane, x, y);
    const int32_t v_7 = (y - 8 > 0) ? fidelity_low_y(plane, x, y - 8) : v1;
    const int32_t v_5 = (y - 6 > 0) ? fidelity_low_y(plane, x, y - 6) : v1;
    const int32_t v_3 = (y - 4 > 0) ? fidelity_low_y(plane, x, y - 4) : v1;
    const int32_t v_1 = (y - 2 > 0) ? fidelity_low_y(plane, x, y - 2) : v1;
    const int32_t v3  = (y + 2 < h) ? fidelity_low_y(plane, x, y + 2) :
                                        fidelity_low_y(plane, x, h - 2);
    const int32_t v5  = (y + 4 < h) ? fidelity_low_y(plane, x, y + 4) :
                                        fidelity_low_y(plane, x, h - 2);
    const int32_t v7  = (y + 6 < h) ? fidelity_low_y(plane, x, y + 6) :
                                        fidelity_low_y(plane, x, h - 2);
    outBuf[getIdx(plane, x, y)] = v0 - fidelity_high(v_7, v_5, v_3, v_1, v1, v3, v5, v7);
    outBuf[getIdx(plane, x, y + 1)] = v1;
}
void main() {
    int off_y = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);
    int off_x = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
    int pic_z = int(gl_GlobalInvocationID.z);
    uint h = int(plane_sizes[pic_z].y);
    uint w = int(plane_sizes[pic_z].x);
    int y = int(gl_GlobalInvocationID.y);
    for (; 2 * y < h; y += off_y) {
        int x = int(gl_GlobalInvocationID.x);
        for (; x < w; x += off_x) {
            idwt_vert(pic_z, x, 2 * y);
        }
    }
}
