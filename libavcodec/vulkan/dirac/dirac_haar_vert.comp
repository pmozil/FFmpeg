/*
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

layout(push_constant, std430) uniform pushConstants {
    ivec2 plane_sizes[3];
    int plane_offs[3];
    int plane_strides[3];
    int dw[3];
    int wavelet_depth;
};

int getIdx(int plane, int x, int y) {
  return plane_offs[plane] + plane_strides[plane] * y + x;
}

void idwt_vert(int plane, int x, int y) {
    int offs0 = plane_offs[plane] + plane_strides[plane] * y + x;
    int offs1 = plane_offs[plane] + plane_strides[plane] * (y + 1) + x;
    int32_t val_orig0 = inBuf[offs0];
    int32_t val_orig1 = inBuf[offs1];
    int32_t val_new0 = val_orig0 - ((val_orig1 + 1) >> 1);
    int32_t val_new1 = val_orig1 + val_new0;
    outBuf[offs0] = val_new0;
    outBuf[offs1] = val_new1;
}

void main() {
    int off_y = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);
    int off_x = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
    int pic_z = int(gl_GlobalInvocationID.z);
    uint h = int(plane_sizes[pic_z].y);
    uint w = int(plane_sizes[pic_z].x);
    int y = int(gl_GlobalInvocationID.y);

    for (; 2 * y < h; y += off_y) {
        int x = int(gl_GlobalInvocationID.x);
        for (; x < w; x += off_x) {
            idwt_vert(pic_z, x, 2 * y);
        }
    }
}
