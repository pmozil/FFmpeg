/*
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

layout(push_constant, std430) uniform pushConstants {
    ivec2 plane_sizes[3];
    int plane_offs[3];
    int plane_strides[3];
    int dw[3];
    int wavelet_depth;
};

int getIdx(int plane, int x, int y) {
  return plane_offs[plane] + plane_strides[plane] * y + x;
}

int32_t legall_high(int32_t v1, int32_t v2, int32_t v3) {
       return v1 + ((v2 + v3 + 1) >> 1);
}

int32_t legall_low_x(int plane, int x, int y) {
    const int w = plane_sizes[plane].x;
    const int dw = w / 2;

    const int x_1 = (x > 0) ? x : 0;
    const int32_t val_1 = inBuf[getIdx(plane, x_1, y)];
    const int x1 = (x > 0) ? (x + dw) : dw;

    const int32_t val1 = inBuf[getIdx(plane, x1, y)];
    const int x0 = (x > 0) ? (x + dw - 1) : dw;
    const int32_t val0 = inBuf[getIdx(plane, x0, y)];

    return val_1 - ((val0 + val1 + 2) >> 2);
}

int32_t dd97_high(int32_t v1, int32_t v2, int32_t v3, int32_t v4, int32_t v5) {
    return  v3 + ((9 * v4 + 9 * v2 - v5 - v1 + 8) >> 4);
}

void idwt_horiz(int plane, int x, int y) {
    const int w = plane_sizes[plane].x;
    const int dw = w / 2 - 1;

    const int32_t out0 = legall_low_x(plane, x, y);

    const int32_t out_1 = ((x - 1) > 0) ? legall_low_x(plane, x - 1, y) : out0;
    const int32_t val3 = inBuf[getIdx(plane, x + dw + 1, y)];
    const int32_t out1 = ((x + 1) <= dw) ? legall_low_x(plane, x + 1, y) :
                                            legall_low_x(plane, dw, y);
    const int32_t out2 = ((x + 2) <= dw) ? legall_low_x(plane, x + 2, y) :
                                            legall_low_x(plane, dw, y);
    const int32_t res  = dd97_high(out_1, out0, val3, out1, out2);

    outBuf[getIdx(plane, 2 * x, y)]     = (out0 + 1) >> 1;
    outBuf[getIdx(plane, 2 * x + 1, y)] = (res + 1) >> 1;
}

void main() {
    int off_y = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);
    int off_x = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
    int pic_z = int(gl_GlobalInvocationID.z);
    uint h = int(plane_sizes[pic_z].y);
    uint w = int(plane_sizes[pic_z].x);
    int y = int(gl_GlobalInvocationID.y);

    for (; y < h; y += off_y) {
        int x = int(gl_GlobalInvocationID.x);
        for (; 2 * x < w; x += off_x) {
            idwt_horiz(pic_z, x, y);
        }
    }
}
