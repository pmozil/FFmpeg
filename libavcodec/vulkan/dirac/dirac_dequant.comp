/*
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

layout(push_constant, std430) uniform pushConstants {
    ivec2 plane_sizes[3];
    int plane_offs[3];
    int plane_strides[3];
    int dw[3];
    int wavelet_depth;
};

void dequant(int outIdx, int idx, int qf, int qs) {
    int32_t val = inBuffer[idx];
    val = sign(val) * ((abs(val) * qf + qs) >> 2);
    outBuf0[outIdx] = outBuf1[outIdx] = val;
}

const uint16_t STATE_START  = uint16_t(0);
const uint16_t STATE_FOLLOW = uint16_t(256);
const uint16_t STATE_DATA   = uint16_t(512);
const uint16_t STATE_SIGN   = uint16_t(768);

int32_t dequant_imm(int val, int qf, int qs) {
    return sign(val) * ((abs(val) * qf + qs) >> 2);
}

void decode_and_dequant(int offs, int bytes, int dst, int qf, int qs)
{
    int next_val = inBuffer[offs];
    int idx = 1;
    int cur_idx = 0;
    int num_all = 0;
    int32_t val = 0;
    LUTState lut = dirac_golomb_lut[inBuffer[offs]];

    for (int i = 1; i < bytes; i++) {
        val  = (val << lut.val0_bits) | lut.val0;
        int real_dst = dst + cur_idx;
        outBuf0[real_dst] = outBuf1[real_dst] = dequant_imm((val - 1) * lut.sign, qf, qs);
        outBuf0[real_dst + 1] = outBuf1[real_dst + 1] = dequant_imm(lut.val1, qf, qs);
        outBuf0[real_dst + 2] = outBuf1[real_dst + 2] = dequant_imm(lut.val2, qf, qs);
        outBuf0[real_dst + 3] = outBuf1[real_dst + 3] = dequant_imm(lut.val3, qf, qs);
        outBuf0[real_dst + 4] = outBuf1[real_dst + 4] = dequant_imm(lut.val4, qf, qs);
        outBuf0[real_dst + 5] = outBuf1[real_dst + 5] = 0;
        outBuf0[real_dst + 6] = outBuf1[real_dst + 6] = 0;
        outBuf0[real_dst + 7] = outBuf1[real_dst + 7] = 0;
        if (lut.num != 0) {
            val = lut.val;
        }
        cur_idx += lut.num;
        if (cur_idx >= bytes){
            return;
        }
        idx++;
        next_val = int(inBuffer[offs + idx]);
        lut = dirac_golomb_lut[lut.state + next_val];
    }
}

void proc_slice(int slice_idx) {
    const int plane = int(gl_GlobalInvocationID.y);

    const int base_idx = slice_idx * DWT_LEVELS * 8;
    const int base_slice_idx = slice_idx * DWT_LEVELS * 3 + plane * DWT_LEVELS;


    Slice s = slices[base_slice_idx];
    int offs = s.offs;

    for(int level = 0; level < wavelet_depth; level++) {
        Slice s = slices[base_slice_idx + level];


        for(int orient = int(bool(level)); orient < 4; orient++) {
            int32_t qf = quantMatrix[base_idx + level * 8 + orient];
            int32_t qs = quantMatrix[base_idx + level * 8 + orient + 4];

            const int subband_idx = plane * DWT_LEVELS * 4
                                        + 4 * level + orient;

            const SubbandOffset sub_off = subband_offs[subband_idx];
            int img_idx = plane_offs[plane] + sub_off.base_off
                            + s.top * sub_off.stride + s.left;
            LUTState lut = dirac_golomb_lut[inBuffer[offs]];
            offs++;

            int x = 0;
            int32_t val = 0;
            for(int y = 0; y < s.tot_v; y++) {
                int32_t buf[8];
                int cur_idx = 0;
                while (x < s.tot_h) {
                    val  = (val << lut.val0_bits) | lut.val0;
                    buf[0] = dequant_imm((val - 1) * lut.sign, qf, qs);
                    buf[1] = dequant_imm(lut.val1, qf, qs);
                    buf[2] = dequant_imm(lut.val2, qf, qs);
                    buf[3] = dequant_imm(lut.val3, qf, qs);
                    buf[4] = dequant_imm(lut.val4, qf, qs);
                    buf[5] = 0;
                    buf[6] = 0;
                    buf[7] = 0;
                    val = lut.num == 0 ? val : lut.val;
                    for (cur_idx = 0; x + cur_idx < s.tot_h && cur_idx < lut.num; cur_idx++) {
                        outBuf0[img_idx + x + cur_idx] = buf[cur_idx];
                        outBuf1[img_idx + x + cur_idx] = buf[cur_idx];
                    }

                    x += lut.num;
                    debugPrintfEXT("Val0: %i\n", buf[0]);

                    lut = dirac_golomb_lut[lut.state + inBuffer[offs]];
                    offs++;
                }
                img_idx += sub_off.stride;
                x = cur_idx;
                // for (;x <= lut.num; x++) {
                //     outBuf0[img_idx + x] = buf[x];
                //     outBuf1[img_idx + x] = buf[x];
                // }
                // for(int x = 0; x < s.tot_h;) {
                //     offs++;
                //     val = (val << lut.val0_bits) | lut.val0;
                //     debugPrintfEXT("Val0 bits: %i\n", int(lut.val0_bits));
                //     x += lut.num;
                //     lut = dirac_golomb_lut[offs + lut.state];
                //     offs++;
                //     // outBuf0[img_x + x] = outBuf1[img_x + x]
                // }
            }
        }
    }
}

void main() {
    int idx = int(gl_GlobalInvocationID.x);
    proc_slice(idx);
}
