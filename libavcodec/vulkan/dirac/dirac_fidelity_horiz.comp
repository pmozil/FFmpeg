/*
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

layout(push_constant, std430) uniform pushConstants {
    ivec2 plane_sizes[3];
    int plane_offs[3];
    int plane_strides[3];
    int dw[3];
    int wavelet_depth;
};

int getIdx(int plane, int x, int y) {
  return plane_offs[plane] + plane_strides[plane] * y + x;
}

int32_t fidelity_high(int32_t v0, int32_t v1, int32_t v2, int32_t v3,
                        int32_t v4, int32_t v5, int32_t v6, int32_t v7) {
    return  (-8 * v0 + 21 * v1 - 46 * v2 + 161 * v3 + 161 * v4 - 46 * v5 + 21 * v6 - 8 * v7 + 128) >> 8;
}

int32_t fidelity_low(int32_t v0, int32_t v1, int32_t v2, int32_t v3,
                    int32_t v4, int32_t v5, int32_t v6, int32_t v7) {
    return  (-2 * v0 + 10 * v1 - 25 * v2 + 81 * v3 + 81 * v4 - 25 * v5 + 10 * v6 - 2 * v7 + 128) >> 8;
}

int32_t fidelity_low_x(int plane, int x, int y) {
    const int w = plane_sizes[plane].x;
    const int dw = w / 2 - 1;

    const int x_3 = clamp(x - 3, 0, dw);
    const int32_t v_3 = inBuf[getIdx(plane, x_3, y)];

    const int x_2 = clamp(x - 2, 0, dw);
    const int32_t v_2 = inBuf[getIdx(plane, x_2, y)];

    const int x_1 = clamp(x - 1, 0, dw);
    const int32_t v_1 = inBuf[getIdx(plane, x_1, y)];

    const int32_t v0 = inBuf[getIdx(plane, x, y)];

    const int x_w = x + dw + 1;
    const int32_t v_w = inBuf[getIdx(plane, x_w, y)];

    const int x1 = clamp(x + 1, 0, dw);
    const int32_t v1 = inBuf[getIdx(plane, x1, y)];

    const int x2 = clamp(x + 2, 0, dw);
    const int32_t v2 = inBuf[getIdx(plane, x2, y)];

    const int x3 = clamp(x + 3, 0, dw);
    const int32_t v3 = inBuf[getIdx(plane, x3, y)];

    const int x4 = clamp(x + 4, 0, dw);
    const int32_t v4 = inBuf[getIdx(plane, x4, y)];

    return v_w + fidelity_low(v_3, v_2, v_1, v0, v1, v2, v3, v4);
}

void idwt_horiz(int plane, int x, int y) {
    const int w = plane_sizes[plane].x;
    const int dw = w / 2 - 1;

    const int32_t vo0 = inBuf[getIdx(plane, x, y)];

    const int x_4 = clamp(x - 4, 0, dw);
    const int32_t v_4 = fidelity_low_x(plane, x_4, y);
    const int x_3 = clamp(x - 3, 0, dw);
    const int32_t v_3 = fidelity_low_x(plane, x_3, y);
    const int x_2 = clamp(x - 2, 0, dw);
    const int32_t v_2 = fidelity_low_x(plane, x_2, y);
    const int x_1 = clamp(x - 1, 0, dw);
    const int32_t v_1 = fidelity_low_x(plane, x_1, y);
    const int x0 = clamp(x, 0, dw);
    const int32_t v0 = fidelity_low_x(plane, x0, y);
    const int x1 = clamp(x + 1, 0, dw);
    const int32_t v1 = fidelity_low_x(plane, x1, y);
    const int x2 = clamp(x + 2, 0, dw);
    const int32_t v2 = fidelity_low_x(plane, x2, y);
    const int x3 = clamp(x + 3, 0, dw);
    const int32_t v3 = fidelity_low_x(plane, x3, y);

    outBuf[getIdx(plane, 2 * x, y)] = vo0 - fidelity_high(v_4, v_3, v_2, v_1, v0, v1, v2, v3);
    outBuf[getIdx(plane, 2 * x + 1, y)] = v0;
}

void main() {
    int off_y = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);
    int off_x = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
    int pic_z = int(gl_GlobalInvocationID.z);
    uint h = int(plane_sizes[pic_z].y);
    uint w = int(plane_sizes[pic_z].x);
    int y = int(gl_GlobalInvocationID.y);
    for (; y < h; y += off_y) {
        int x = int(gl_GlobalInvocationID.x);
        for (; 2 * x < w; x += off_x) {
            idwt_horiz(pic_z, x, y);
        }
    }
}
