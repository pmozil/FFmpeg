/*
 * FFv1 codec
 *
 * Copyright (c) 2024 Lynne <dev@lynne.ee>
 *
 * This file is part of FFmpeg.
 *
 * FFmpeg is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * FFmpeg is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with FFmpeg; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

ivec2 get_pred(ivec2 pos, ivec2 off, int p, int comp, int sw,
               uint8_t context_model)
{
    const ivec2 yoff_border1 = off.x == 0 ? ivec2(1, -1) : ivec2(0, 0);
    const ivec2 yoff_border2 = off.x == 1 ? ivec2(1, -1) : ivec2(0, 0);

    TYPE top2 = TYPE(0);
    if (off.y > 1)
        top2 = TYPE(imageLoad(dst[p], pos + ivec2(0, -2))[comp]);

    VTYPE3 top  = VTYPE3(TYPE(0),
                         TYPE(0),
                         TYPE(0));
    if (off.y > 0 && off != ivec2(0, 1))
        top[0] = TYPE(imageLoad(dst[p], pos + ivec2(-1, -1) + yoff_border1)[comp]);
    if (off.y > 0) {
        top[1] = TYPE(imageLoad(dst[p], pos + ivec2(0, -1))[comp]);
        top[2] = TYPE(imageLoad(dst[p], pos + ivec2(min(1, sw - off.x - 1), -1))[comp]);
    }

    VTYPE2 cur = VTYPE2(TYPE(0),
                        TYPE(0));
    if (off.x > 0 && off != ivec2(1, 0))
        cur[0] = TYPE(imageLoad(dst[p], pos + ivec2(-2,  0) + yoff_border2)[comp]);
    if (off != ivec2(0, 0))
        cur[1] = TYPE(imageLoad(dst[p], pos + ivec2(-1,  0) + yoff_border1)[comp]);

    /* context, prediction */
    return ivec2(get_context(cur, top, top2, context_model),
                 predict(cur[1], VTYPE2(top)));
}

#ifndef GOLOMB
int get_isymbol(inout RangeCoder c, uint64_t state)
{
    if (get_rac(c, state))
        return 0;

    state += 1;

    int e = 0;
    while (get_rac(c, state + min(e, 9))) { // 1..10
        e++;
        if (e > 31) {
            corrupt = true;
            return 0;
        }
    }

    state += 21;

    int a = 1;
    for (int i = e - 1; i >= 0; i--)
        a += a + int(get_rac(c, state + min(i, 9)));  // 22..31

    e = -int(get_rac(c, state - 11 + min(e, 10))); // 11..21 sign
    return (a ^ e) - e;
}

void decode_line_pcm(inout SliceContext sc, int y, int p, int comp,
                     int bits)
{
    ivec2 sp = sc.slice_pos;
    int w = sc.slice_dim.x;
    if (p > 0 && p < 3) {
        w >>= chroma_shift.x;
        sp >>= chroma_shift;
    }

    for (int x = 0; x < w; x++) {
        uint v = 0;
        for (int i = (bits - 1); i >= 0; i--)
            v |= uint(get_rac_equi(sc.c)) << i;
        imageStore(dst[p], (sp + ivec2(x, y)), uvec4(v));
    }
}

void decode_line(inout SliceContext sc, uint64_t state,
                 int y, int p, int comp, int bits, const int run_index)
{
    ivec2 sp = sc.slice_pos;

    int w = sc.slice_dim.x;
    if (p > 0 && p < 3) {
        w >>= chroma_shift.x;
        sp >>= chroma_shift;
    }

    for (int x = 0; x < w; x++) {
        ivec2 pr = get_pred(sp + ivec2(x, y), ivec2(x, y), p, comp, w,
                            sc.quant_table_idx[p]);

        int diff = get_isymbol(sc.c, state + CONTEXT_SIZE*abs(pr[0]));

        if (pr[0] < 0)
            diff = -diff;

        int pix = zero_extend(pr[1] + diff, bits);
        imageStore(dst[p], (sp + ivec2(x, y)), uvec4(pix));
    }
}
#endif

void decode_slice(inout SliceContext sc, const uint slice_idx)
{
    int bits = bits_per_raw_sample;

#ifndef GOLOMB
    if (sc.slice_coding_mode == 1) {
        for (int p = 0; p < planes; p++) {

            int h = sc.slice_dim.y;
            if (p > 0 && p < 3)
                h >>= chroma_shift.y;

            for (int y = 0; y < h; y++)
                decode_line_pcm(sc, y, p, 0, bits);
        }
    } else
#endif
    {
        uint64_t slice_state_off = uint64_t(slice_state) +
                                   slice_idx*plane_state_size*codec_planes;

        for (int p = 0; p < planes; p++) {
            int run_index = 0;

            int h = sc.slice_dim.y;
            if (p > 0 && p < 3)
                h >>= chroma_shift.y;

            for (int y = 0; y < h; y++)
                decode_line(sc, slice_state_off, y, p, 0, bits, run_index);

            /* For the second chroma plane, reuse the first plane's state */
            if (p != 1)
                slice_state_off += plane_state_size;
        }
    }
}

void main(void)
{
    const uint slice_idx = gl_WorkGroupID.y*gl_NumWorkGroups.x + gl_WorkGroupID.x;
    decode_slice(slice_ctx[slice_idx], slice_idx);
}
